<?php

/**
 * @file
 * Module file for the field based login module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function fbl_help($route_name, RouteMatchInterface $route_match) {
  // Main module help for the content_type_dependency module.
  if ($route_name == 'help.page.fbl') {
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Field Based login') . '</p>';
    $output .= '<p>' . t('This module extends drupal core user login feature, using this module admin is allows to configure user account field as loggable. like mobile number or serial number field & users can login with the same mobile number or serial number field. for more info visit <a href=":link">here</a>..', [':link' => 'https://www.drupal.org/project/fbl']) . '</p>';
    $output .= '<h3>' . t('Uses') . '</h3>';
    $output .= '<dl>';
    $output .= '<dt>' . t('Assigning user field to user login') . '</dt>';
    return $output;
  }
}

/**
 * Implements hook_form_alter().
 */
function fbl_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter user login form.
  if ($form_id == 'user_login_form') {
    // Load fbl configurations.
    $fbl_config = \Drupal::config('fbl.settings');
    $fbl_value = $fbl_config->get('field_based_login');

    // Add validation.
    array_unshift($form['#validate'], 'fbl_login_name_validate');

    // Alter name title.
    if (!empty($fbl_value['label'])) {
      $form['name']['#title'] = Html::escape($fbl_value['label']);
    }

    // Alter name field description.
    if (!empty($fbl_value['field_desc'])) {
      $form['name']['#description'] = Html::escape($fbl_value['field_desc']);
    }
  }

  // Set fbl validator on top of other register validators.
  if ($form_id == 'user_form' || $form_id == 'user_register_form') {
    $form['#validate'][] = 'fbl_user_register_validate';
  }
}

/**
 * Implementation of fbl_user_register_validate().
 */
function fbl_user_register_validate($form, FormStateInterface &$form_state) {
  // Load fbl configurations.
  $fbl_config = \Drupal::config('fbl.settings');
  $fbl_value = $fbl_config->get('field_based_login');

  // Make sure we have field.
  $field_name = $fbl_value['field'];
  if (!empty($field_name)) {
    // Get user input.
    $user_input = $form_state->getValue($field_name);
    if (!empty($user_input[0]['value'])) {
      // Run query to check and make sure value is unique.
      $query = \Drupal::entityQuery('user');
      $query->condition($field_name . '.value', $user_input[0]['value']);
      // If on user form, let's load this user and exclude from lookup.
      if ($form_state->getValue('form_id') && $form_state->getValue('form_id') == 'user_form') {
        /** @var \Drupal\user\Entity\User $user */
        if ($user = user_load_by_name($form_state->getValue('name'))) {
          // Exclude current user.
          $query->condition('uid', $user->id(), '!=');
        }
      }
      // Get results.
      $results = $query->execute();
      // If any results, let's throw error.
      if (count($results)) {
        $form_state->setErrorByName($field_name, t('The entered value already exists. Please enter a different value.'));
      }
    }
  }
}

/**
 * Custom validate function to check custom user field records.
 */
function fbl_login_name_validate($form, FormStateInterface &$form_state) {
  // Load fbl configurations.
  $fbl_config = \Drupal::config('fbl.settings');
  $logger = \Drupal::logger('user');
  $fbl_value = $fbl_config->get('field_based_login');

  // If configuration not yet set, then allow users to login by username.
  $allow_user_login_by_name = $fbl_value['allow_user_name'] ?? 1;
  $allow_user_login_by_email = $fbl_value['allow_user_email'];
  $user_not_found = TRUE;
  $login_input = $form_state->getValue('name');
  if (!empty($fbl_value['field']) || $allow_user_login_by_email) {
    // Field value is set.
    if (!empty($fbl_value['field'])) {
      $query = \Drupal::entityQuery('user');
      $query->condition($fbl_value['field'] . '.value', $login_input);
      $results = $query->execute();
      if ($results) {
        $user_not_found = FALSE;
        // Check for multiple records.
        if (count($results) > 1) {
          $form_state->setErrorByName('name', t('Sorry, Please contact administration. There are multiple user records found with same input.'));
          $logger->error('Login attempt failed for %user. Using field based login.', ['%user' => $login_input]);
        }
        else {
          // Get user id.
          $uid = array_keys($results)[0];
          // Run query to get real username.
          $connection = \Drupal::database();
          $query = $connection->select('users_field_data', 'u');
          $query->fields('u', ['name']);
          $query->condition('u.uid', $uid);
          $user = $query->execute()->fetchObject();
          if ($user) {
            // Set real username.
            $form_state->setValue('name', $user->name);
          }
          else {
            $logger->warning('Login attempt, user not found for user id: %uid.', ['%uid' => $uid]);
          }
        }
      }
    }

    // Load user object by username.
    $user_load_by_name = user_load_by_name($login_input);
    if ($user_load_by_name && $allow_user_login_by_name) {
      $user_not_found = FALSE;
    }

    // Load user object by its email.
    $user_load_by_mail = user_load_by_mail($login_input);
    if ($user_load_by_mail && $allow_user_login_by_email) {
      $user_not_found = FALSE;
      $form_state->setValue('name', $user_load_by_mail->getDisplayName());
    }

    // User not found.
    if ($user_not_found) {
      $form_state->setErrorByName('name', t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', ['@password' => Url::fromRoute('user.pass')]));
      $logger->error('Login attempt failed for %user. Using field based login.', ['%user' => $login_input]);
    }
  }

}
